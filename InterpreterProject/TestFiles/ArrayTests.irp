successes = 0
failures = 0
testnum = 0
function compare(name, expected, actual)
{
    testnum = testnum + 1

    if (expected == actual)
    {
        print(name, " Test ", testnum, " SUCCESS ", "Expected:  ", expected, " Actual:  ", actual, endl)
        successes = successes + 1
    }
    else
    {
        print("###  ", name, " Test ", testnum, " FAILURE ", "Expected:  ", expected, " Actual:  ", actual, endl)
        failures = failures + 1
    }
}

a = dim[10]
for (i=0, i<10, i = i + 1)
{
    a[i] = i
}

for (i=0, i<10, i = i + 1)
{
    compare("Single Dimension Test", i, a[i])
}

for (i=0, i<10, i = i + 1)
{
    a[i] = a[i] * 2
}

for (i=0, i<10, i = i + 1)
{
    compare("Single Dimension Expression Test", i*2, a[i])
}

b = dim[5,11]
for (i=0, i < 5, i = i + 1)
{
    for (j=0, j<11, j = j + 1)
    {
        b[i,j] = i * j
    }
}

for (i=0, i < 5, i = i + 1)
{
    for (j=0, j<11, j = j + 1)
    {
        compare("Double Dimension Test", i*j, b[i,j])
    }
}

c = dim[2,3,4]
elementCount = 2 * 3 * 4
d = dim[elementCount]
srand(123)
count = 0
for (i=0, i < 2, i = i + 1)
{
    for (j=0, j < 3, j = j + 1)
    {
        for (k=0, k < 4, k = k + 1)
        {
            q = rand()
            d[count] = q
            print("i ", i, "j ", j, "k ", k, endl)
            c[i,j,k] = q
            count = count + 1
        }
    }
}

matrixSize = 3 * 4
for (i=0, i < elementCount, i=i+1)
{
    // Convert element count to requestedMatrix
    requestedMatrix = i / matrixSize
    matrixOffset = i - requestedMatrix * matrixSize 
    requestedRow = matrixOffset / 4
    requestedCol = i - (requestedMatrix * matrixSize + requestedRow*4)
    print("index ", i, " requMatrix ", requestedMatrix, " requRow ", requestedRow, " requCol ", requestedCol, endl)
    print("3-d Element ", i)
    compare(" Check", d[i], c[requestedMatrix, requestedRow, requestedCol])
}


print( "Tests Complete\n" )
print( "Successes:  ", successes, endl)
print( "Failures:   ", failures, endl)
print( "Totals:  ", testnum, endl)
